<?php
namespace app\wap\controller;

use think\Controller;

class Test extends Controller{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $this->_logic_buy_1 = \model('buy_1','logic');
    }

    //将老数据导入新数据库中
    public function import(){
//        $school_id="000000005e45f959015e46b041a70001";//太谷启航二中
        $school_id="297edff86569e03d016574765ebe2d91";//哈尔滨山水幼儿园
        //导入班级并未绑定房间位置
              //查询该学校所有班级
/*            $class = db('aaclassroom')->where(array('school_school_id'=>$school_id))->select();
//            halt($class);
            //获取新平台学校ID级类型ID及公司ID
            $schoolid = 2;
            $schoolInfo=db('school')->where(array('schoolid'=>$schoolid))->find();
            foreach($class as $key=>$val){
                $data = array(
                    'schoolid' => $schoolid,
                    'typeid' => 2,
                    'position_id' => 0,
                    'classname' => $val['name'],
                    'desc' => '批量导入旧班级',
                    'option_id' => 1,
                    'oldid' => $val['id'],
                    'admin_company_id' => $schoolInfo['admin_company_id'],
                    'createtime' => date('Y-m-d H:i:s', time())
                );
                $data['school_provinceid'] = $schoolInfo['provinceid'];
                $data['school_cityid'] = $schoolInfo['cityid'];
                $data['school_areaid'] = $schoolInfo['areaid'];
                $data['school_region'] = $schoolInfo['region'];
                $model_classes = model('Classes');
                //生成班级识别码
                $classcard = $schoolInfo['schoolCard'] . ($model_classes->getNumber($schoolInfo['schoolCard']));
                $data['classCard'] = $classcard;
                //生成二维码
                import('qrcode.index', EXTEND_PATH);
                $PhpQRCode = new \PhpQRCode();
                $PhpQRCode->set('pngTempDir', BASE_UPLOAD_PATH . DS . 'class' . DS . $schoolInfo['schoolCard'] . DS);
                // 生成班级二维码
                $PhpQRCode->set('date', $classcard);
                $PhpQRCode->set('pngTempName', $classcard . '.png');
                $qr = $PhpQRCode->init();
                $data['qr'] = '/mobile/class/' . $schoolInfo['schoolCard'] . '/' . $qr;
                //验证数据  END
                $data['res_group_id'] = 0;
                $model_classes->addClasses($data);
            }*/
        //导入家长信息
            /* //查询该学校家长->where(array('school_school_id'=>$school_id))
            $w = ' password != "" ';
            $a = 'bbb1af9e5e92c9f2015e92e39d0d0012';
            $w .= ' and id= "'.$a.'"';
            $member = db('aamember')->where($w)->select();
//            halt($member);
            $model_member = Model('member');
            foreach($member as $key=>$val){
                if($val['phone'] && mb_strlen($val['phone']) == 11){
                    $data = array(
                        'member_name'      => $val['name'],
                        'member_password'  => md5('123456'),
                        'member_mobile'     => $val['phone'],
                        'member_truename'  => $val['name'],
                        'member_sex'       => $val['sex'],
                        'member_nickname'  => $val['name'],
                        'member_mobile_bind'  => 1,
                        'member_add_time'  => TIMESTAMP,
                        'member_login_num' => 0,
                        'oldid' => $val['id'],
                        'schoolid' => 1,
                        'inform_allow'     => 1, //默认允许举报商品
                    );
                    $model_member->addMember($data);
                }
            }*/
        //导入学生信息
               //查询该学校家长
       /* $schoolid = 2;
        $schoolInfo=db('school')->where(array('schoolid'=>$schoolid))->find();
        $student = db('aastudent')->where(array('school_school_id'=>$school_id))->select();//1200
//            halt($student);
        $model_student = model('Student');
        foreach($student as $key=>$value){
            //获取新班级id
            $class_id =db('class')->where(array('oldid'=>$value['classroom_classroom_id']))->find();
            if(!empty($class_id)){
//                halt($value['id']);
                //获取旧平台的绑定家长ID
                $old_member = db('aastudent_bindstudentmember')->where(array('student_bindStudentMember_id'=>$value['id']))->find();
//                halt($old_member);
                //获取主账号ID
                $member_id = db('member')->where(array('oldid'=>$old_member['member_id']))->find();
                if(empty($member_id)){
                    $member_id['member_id']='';
                }
//                halt($member_id);
                $data = array(
                    's_name' => $value['name'],
                    's_sex' => 1,
                    's_classid' => $class_id['classid'],
                    's_schoolid' => $schoolid,
                    's_sctype' => 2,
                    's_birthday' => $value['birthday'],
                    's_card' => $value['idCard'],
                    's_provinceid' => $schoolInfo['provinceid'],
                    's_cityid' => $schoolInfo['cityid'],
                    's_areaid' => $schoolInfo['areaid'],
                    's_region' => $schoolInfo['region'],
                    's_remark' => '批量导入学生',
                    's_ownerAccount' => $member_id['member_id'],//主账号ID
                    'option_id' => 1,
                    'oldid' => $value['id'],
                    'admin_company_id' => 1,
                    's_createtime' => date('Y-m-d H:i:s',time())
                );
                //获取班级识别码
                $class = db('class')->where(array('classid'=>input('post.class')))->field('classCard')->find();
                $data['classCard'] = $class['classCard'];

                //验证数据  END
                $model_student->addStudent($data);
            }

        }*/
        //生成订单
           //获取需要生成的订单组合
/*            $where = ' s.s_ownerAccount != ""';
//            $where .= ' AND s.s_id <= 4927 AND s.s_id >= 4923';
            $where .= ' AND s.s_schoolid=2 ';
            $student_list = db('student')->alias('s')
                ->field('s.s_id,s.s_name,m.member_id,m.member_mobile,m.member_name')
                ->join('member m','m.member_id=s.s_ownerAccount')
                ->where($where)
                ->select();

//            halt($student_list);
            //判断是否存在套餐
                $Pkgs=model('Pkgs');
                $packageInfo = $Pkgs->getOnePkg(array('pkg_id'=>1,'pkg_enabled'=>1));
                if ($packageInfo) {
                    unset($packageInfo['pkg_sort']);
                    unset($packageInfo['pkg_enabled']);
                }else{
                    halt('没有此套餐的信息！');
                }
                foreach ($student_list as $key=>$value){
                    //获取订单号
                    $pay_sn = $this->_logic_buy_1->makePaySn($value['member_id']);
                    //生成基本订单信息
                    $order = array();
                    $order['pay_sn'] = $pay_sn;
                    $order['buyer_id'] = $value['member_id'];
                    $order['buyer_name'] = $value['member_name'];
                    $order['buyer_mobile'] = $value['member_mobile'];
                    $order['add_time'] = TIMESTAMP;
                    $order['payment_code'] = "offline";
                    $order['order_from'] = 1;
                    $order['order_state'] = ORDER_STATE_PAY;
                    //加入套餐信息
                    if(is_array($packageInfo))$order +=$packageInfo;
                    unset($order['up_time']);
                    $Children = model('Student');
                    $childinfo=$Children->getChildrenInfoById($value['s_id']);
                    if (!$childinfo) {
                        halt('没有当前孩子信息！');
                    }
                    $Relation = $Children->checkParentRelation($value['member_id'],$value['s_id']);
                    if($Relation=='false')halt('您不是此孩子的家长，不能购买当前套餐！');
                    //加入学生学校班级信息
                    if(is_array($childinfo))$order += $childinfo;
                    $order['order_amount'] = $packageInfo['pkg_price'];
                    $model = Model('Packagesorder');
                    $model->startTrans();
                    try {
                        //写入订单表
                        $order_pay_id = $model->addOrder($order);
                        $this->orderInfo = $order;
                        $this->orderInfo['order_id'] = $order_pay_id;
                        $this->orderInfo['order_sn'] = $this->_logic_buy_1->makeOrderSn($order_pay_id);
                        //写入平台流水号
                        $model->editOrder(array('order_sn'=>$this->orderInfo['order_sn']), array('order_id'=>$order_pay_id));


                        //添加订单时间
                        $PkgTime = model('Packagetime');
                        $condition=array(
                            'member_id'=>$value['member_id'],
                            's_id'=>$value['s_id'],
                            'pkg_type'=>1
                        );
                        $packagetime = $PkgTime->getOnePkg($condition);
                        $order_info['finnshed_time'] = empty($order_info['finnshed_time'])?time():$order_info['finnshed_time'];
//                        $end_time = CalculationTime($order_info,$packagetime);
                        $end_time = strtotime('2019-11-25 12:00:00');
                        $pkgtype = '视频云';
                        $pdata = array(
                            'end_time' => $end_time,
                            'up_time' => time(),
                        );
                        if(!$packagetime){
                            $pdata['member_id'] = $value['member_id'];
                            $pdata['member_name'] = $value['member_name'];
                            $pdata['s_id'] = $value['s_id'];
                            $pdata['s_name'] = $value['s_name'];
                            $pdata['pkg_type'] = 1;
                            $pdata['start_time'] = time();
                            $pdata['up_desc'] = date('Y-m-d H:i',time()).'主账号'.'['.$value['member_name'].']:'.'第一次购买'.$pkgtype.'套餐,套餐到期时间:'.date('Y-m-d H:i',$end_time);
                            $PkgTime->pkg_add($pdata);
                        }else{ //更新套餐时间
                            $pdata['up_desc'] = $packagetime['up_desc'].'&'.date('Y-m-d H:i',time()).'主账号 '.'['.$value['member_name'].']:'.'购买'.$pkgtype.'套餐,套餐到期时间:'.date('Y-m-d H:i',$end_time);
                            $pdata['id'] =$packagetime['id'];
                            $PkgTime->pkg_update($pdata);

                        }

                        $condition = array();
                        $condition['order_id'] = $order_info['order_id'];
                        $post['order_dieline']= $end_time;
                        Model('Packagesorder')->editOrder($post, $condition);

                        $model->commit();

                    } catch (Exception $e) {
                        $model->rollback();
                        return ds_callback(false, $e->getMessage());
                    }
                }*/



        echo '结束了';























    }

}